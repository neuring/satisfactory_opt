from typing import NamedTuple

class Span(NamedTuple):
    start: int
    end: int

    @staticmethod
    def start_len(start: int, len: int) -> "Span":
        return Span(start=start, end=start+len)

    @staticmethod
    def empty() -> "Span":
        return Span(start=0, end=0)

    @property
    def len(self) -> int:
        assert(self.end >= self.start)
        return self.end - self.start
    
    def merge(self, other: "Span") -> "Span":
        s = min(self.start, other.start)
        e = max(self.end, other.end)
        return Span(s, e)


class SourceLocation(NamedTuple):
    line: int
    column: int
    content: str

# Locates the span in the given str
# The `span` should have be generated by parsing `s`.
def locate(span: Span, s: str) -> SourceLocation:

    current_pos = 0

    lines = s.splitlines()

    for line_idx, line in enumerate(lines):
        if span.start < current_pos:
            span_line_idx = line_idx - 1
            span_col_idx = span.start - current_pos
            content = s[span.start:span.end]
            return SourceLocation(span_line_idx, span_col_idx, content)
        else:
            current_pos += len(line)
    
    assert False, "Span not located in string"